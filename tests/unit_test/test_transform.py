import pandas as pd

from etl.transform.clean_daily_stock import transpose_dataframe, reset_dataframe_index, sort_dates_asc, rename_columns, round_price_2dp, add_primary_id, add_foreign_id, reorder_columns
from etl.transform.clean_company_overview import concat_dataframes


def test_transpose():
    # The initial output was generated by chatGPT - all other outputs and inputs have been modified by myself
    input_data = {
                  'A': [1, 2, 3],
                  'B': [4, 5, 6],
                  'C': [7, 8, 9]
                 }
    input = pd.DataFrame(input_data)

    output_data = {
                   0: [1, 4, 7],
                   1: [2, 5, 8],
                   2: [3, 6, 9]
                  }
    expected_output = pd.DataFrame(output_data, index=['A', 'B', 'C'])

    actual_output = transpose_dataframe(input)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_reset_index():
    input_data = {
                   0: [1, 4, 7],
                   1: [2, 5, 8],
                   2: [3, 6, 9]
                  }
    input = pd.DataFrame(input_data, index=['A', 'B', 'C'])

    output_data = {
                   'index': ['A', 'B', 'C'],
                   0: [1, 4, 7],
                   1: [2, 5, 8],
                   2: [3, 6, 9]
                  }
    expected_output = pd.DataFrame(output_data, index=[0, 1, 2])

    actual_output = reset_dataframe_index(input)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_sort_dates_asc():
    input_data = {
                   'index': [5, 4, 3],
                   0: [1, 4, 7],
                   1: [2, 5, 8],
                   2: [3, 6, 9]
                  }
    input = pd.DataFrame(input_data, index=[0, 1, 2])

    output_data = {
                   'index': [3, 4, 5],
                   0: [7, 4, 1],
                   1: [8, 5, 2],
                   2: [9, 6, 3]
                  }
    expected_output = pd.DataFrame(output_data, index=[0, 1, 2])

    actual_output = sort_dates_asc(input)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_rename_columns(): 
    input_data = {
                  'A': [1, 2, 3],
                  'B': [4, 5, 6],
                  'C': [7, 8, 9]
                 }
    input = pd.DataFrame(input_data)
    list_input = ['Test1', 'Test2', 'Test3']

    output_data = {
                   'Test1': [1, 2, 3],
                   'Test2': [4, 5, 6],
                   'Test3': [7, 8, 9]
                  }
    expected_output = pd.DataFrame(output_data)

    actual_output = rename_columns(input, list_input)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_round_values():
    input_data = {
                  'open': [5.333333, 6.33333, 8.99999999],
                  'high': [5.333333, 6.33333, 8.99999999],
                  'low': [5.333333, 6.33333, 8.99999999],
                  'close': [5.333333, 6.33333, 8.99999999],
                  'volume': [5.333333, 6.33333, 8.99999999]
                 }
    input = pd.DataFrame(input_data)

    output_data = {
                  'open': [5.33, 6.33, 9.00],
                  'high': [5.33, 6.33, 9.00],
                  'low': [5.33, 6.33, 9.00],
                  'close': [5.33, 6.33, 9.00],
                  'volume': [5.333333, 6.33333, 8.99999999]
                 }
    expected_output = pd.DataFrame(output_data)

    actual_output = round_price_2dp(input)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_add_primary_id():
    input_data = {
                  'A': [1, 2, 3],
                  'B': [4, 5, 6],
                  'C': [7, 8, 9]
                 }
    input = pd.DataFrame(input_data, index=[0, 1, 2])
    input_column_name = 'test'

    output_data = {
                   'A': [1, 2, 3],
                   'B': [4, 5, 6],
                   'C': [7, 8, 9],
                   'test': [1, 2, 3]
                  }
    expected_output = pd.DataFrame(output_data)

    actual_output = add_primary_id(input, input_column_name)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_add_foreign_id():    
    input_data = {
                  'A': [1, 2, 3],
                  'B': [4, 5, 6],
                  'C': [7, 8, 9]
                 }
    input = pd.DataFrame(input_data)
    input_column_name = 'test'
    input_id = 'ARGX'

    output_data = {
                   'A': [1, 2, 3],
                   'B': [4, 5, 6],
                   'C': [7, 8, 9],
                   'test': [1, 1, 1]
                  }
    expected_output = pd.DataFrame(output_data)

    actual_output = add_foreign_id(input, input_column_name, input_id)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_reorder_columns():
    input_data = {
                  'A': [1, 2, 3],
                  'B': [4, 5, 6],
                  'C': [7, 8, 9]
                 }
    input = pd.DataFrame(input_data)
    input_column_list = ['A', 'C', 'B']

    output_data = {
                  'A': [1, 2, 3],
                  'C': [7, 8, 9],
                  'B': [4, 5, 6],
                 }
    expected_output = pd.DataFrame(output_data)

    actual_output = reorder_columns(input, input_column_list)

    pd.testing.assert_frame_equal(actual_output, expected_output)


def test_concat():
    input_data_1 = {
                  'A': [1],
                  'B': [4],
                  'C': [7]
                 }
    input_data_2 = {
                  'A': [2],
                  'B': [5],
                  'C': [8]
                 }
    input_1 = pd.DataFrame(input_data_1)
    input_2 = pd.DataFrame(input_data_2)

    output_data = {
                  'A': [1, 2],
                  'B': [4, 5],
                  'C': [7, 8]
                 }
    expected_output = pd.DataFrame(output_data, index=[0, 1])

    actual_output = concat_dataframes(input_1, input_2)

    pd.testing.assert_frame_equal(actual_output, expected_output)
